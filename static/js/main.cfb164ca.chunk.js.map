{"version":3,"sources":["logo.svg","components/Field.js","components/Board.js","components/Rule.js","App.js","reportWebVitals.js","index.js"],"names":["Field","props","useState","color","setColor","field","type","id","row","col","className","defaultValue","value","readOnly","onChange","e","parseInt","target","safe","style","backgroundColor","onKeyDown","key","console","log","document","getElementById","Board","makepuzzle","raw","result","rows","i","cols","index","j","push","sudokuGenerator","board","solvepuzzle","solvePuzzle","completed","setCompleted","second","setSecond","minute","setMinute","isActive","setIsActive","counter","setCounter","y","x","safeToPut","length","isCompleted","useEffect","intervalId","setInterval","secondCounter","minuteCounter","Math","floor","computedSecond","String","computedMinute","clearInterval","map","onClick","window","location","reload","Rule","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.cfb164ca.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, { useState } from 'react'\r\n\r\nfunction Field(props) {\r\n    const [color, setColor] = useState('white')\r\n    var field = props.field\r\n\r\n    function handleChange(e) {\r\n        const value = parseInt(e.target.value)\r\n        var safe = props.onChange({ ...props.field, value: value })\r\n        if (safe) {\r\n\r\n            setColor('green')\r\n        } else {\r\n\r\n            setColor('red')\r\n        }\r\n        if (value == null) {\r\n            setColor('white')\r\n        }\r\n        return safe\r\n    }\r\n    function handleKeyDown(e) {\r\n        var key = parseInt(e.key)\r\n        if (!field.readOnly &&\r\n            (key == 1 || key == 2 || key == 3 || key == 4 || key == 5 || key == 6 || key == 7 || key == 8 || key == 9)) {\r\n            console.log()\r\n            document.getElementById(field.row * 9 + field.col).value = ''\r\n        }\r\n\r\n\r\n\r\n    }\r\n    return (\r\n        <input type='number' id={field.row * 9 + field.col} className='cell' defaultValue={field.value} readOnly={field.readOnly} onChange={handleChange} style={{ backgroundColor: color }} onKeyDown={handleKeyDown} />\r\n\r\n    )\r\n}\r\n\r\n\r\nexport default Field\r\n\r\n","import React from 'react'\r\nimport { useState, useEffect } from 'react'\r\n\r\nimport { makepuzzle, solvepuzzle, ratepuzzle } from \"sudoku\";\r\nimport { useTimer } from 'react-timer-hook'\r\nimport Field from './Field'\r\nfunction Board(props) {\r\n    const [raw, setRaw] = useState(makepuzzle())\r\n    const [board, setBoard] = useState(sudokuGenerator())\r\n    const [solvePuzzle, setSolvePuzzle] = useState(solvepuzzle(raw))\r\n    const [completed, setCompleted] = useState(false)\r\n    const [second, setSecond] = useState('00')\r\n    const [minute, setMinute] = useState('00')\r\n    const [isActive, setIsActive] = useState(false)\r\n    const [counter, setCounter] = useState(0)\r\n\r\n    \r\n\r\n\r\n    useEffect(() => {\r\n        \r\n        \r\n        setIsActive(true)\r\n        let intervalId;\r\n\r\n        if (isActive) {\r\n            intervalId = setInterval(() => {\r\n                const secondCounter = counter % 60;\r\n                const minuteCounter = Math.floor(counter / 60);\r\n\r\n                const computedSecond = String(secondCounter).length === 1 ? `0${secondCounter}` : secondCounter;\r\n                const computedMinute = String(minuteCounter).length === 1 ? `0${minuteCounter}` : minuteCounter;\r\n\r\n                setSecond(computedSecond);\r\n                setMinute(computedMinute);\r\n\r\n                setCounter(counter => counter + 1);\r\n            }, 1000)\r\n        }\r\n\r\n        return () => clearInterval(intervalId);\r\n        \r\n    }, [isActive, counter])\r\n\r\n\r\n    function sudokuGenerator() {\r\n        const result = { rows: [] }\r\n        for (let i = 0; i < 9; i++) {\r\n            const row = { cols: [], index: i }\r\n            for (let j = 0; j < 9; j++) {\r\n                var value = raw[i * 9 + j]\r\n                if (value != null) value++\r\n                var col = {\r\n                    row: i,\r\n                    col: j,\r\n                    value: value,\r\n                    readOnly: value != null\r\n                }\r\n\r\n                row.cols.push(col)\r\n            }\r\n            result.rows.push(row)\r\n        }\r\n        \r\n        return result\r\n    }\r\n\r\n    function safeToPut(field) {\r\n        board.rows[field.row].cols[field.col].value = 0\r\n        if (field.value <= 0 || field.value > 9) return false\r\n        if (typeof (field.value) != 'number') return false\r\n        for (let i = 0; i < 9; i++) {\r\n            if (board.rows[field.row].cols[i].value === field.value) {\r\n                console.log('false 1', field.row, i)\r\n                return false\r\n            }\r\n            if (board.rows[i].cols[field.col].value === field.value) {\r\n                console.log('false 2', i, field.col)\r\n                return false\r\n            }\r\n        }\r\n\r\n        //3 x 3 matrices coordinates\r\n        var y = field.row - (field.row % 3)\r\n        var x = field.col - (field.col % 3)\r\n\r\n        for (let i = y; i < y + 3; i++) {\r\n            for (let j = x; j < x + 3; j++) {\r\n                if (board.rows[i].cols[j].value === field.value) {\r\n                    console.log('false 3')\r\n                    return false\r\n                }\r\n            }\r\n        }\r\n\r\n        return true\r\n    }\r\n\r\n    function onChange(field) {\r\n        var safe = safeToPut(field)\r\n        if (safe) {\r\n            board.rows[field.row].cols[field.col] = field\r\n            raw[field.row * 9 + field.col] = field.value - 1\r\n        }\r\n        setCompleted(isCompleted())\r\n        console.log(completed)\r\n        console.log(raw)\r\n        console.log(solvePuzzle)\r\n        return safe\r\n    }\r\n    function isCompleted() {\r\n        for (let i = 0; i < raw.length; i++) {\r\n            if (raw[i] !== solvePuzzle[i]) {\r\n                console.log(\"false\")\r\n                return false\r\n            }\r\n        }\r\n        setIsActive(false)\r\n        return true\r\n    }\r\n\r\n    function setWin() {\r\n        setCompleted(true)\r\n    }\r\n    function reset() {\r\n        window.location.reload()\r\n    }\r\n    return (\r\n        <div className='board'>\r\n            <div className=\"time\">\r\n                <span className=\"minute\">{minute}</span>\r\n                <span>:</span>\r\n                <span className=\"second\">{second}</span>\r\n            </div>\r\n            {board.rows.map((row) => (\r\n                <div className='row' key={row.index}>{\r\n                    row.cols.map((col) => (\r\n                        <Field field={col} key={col.index} onChange={onChange} />\r\n                    ))\r\n                }</div>\r\n            ))}\r\n            {/* <a onClick={setWin} className='btn'>Win</a> */}\r\n            {completed && <h1 className='alert'>You solved the puzzle in {minute} minutes and {second} seconds <button onClick={reset} className='btn'>Reset</button></h1>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Board\r\n","import React from 'react'\r\nimport './Rule.css'\r\nfunction Rule() {\r\n    return (\r\n        <div>\r\n            <h1>The Rules</h1>\r\n\r\n            <ol>\r\n          \r\n            \r\n            <li>Every square has to contain a single number</li>\r\n            <li> Only the numbers from 1 through to 9 can be used</li>\r\n            <li> Each 3×3 box can only contain each number from 1 to 9 once</li>\r\n            <li>  Each vertical column can only contain each number from 1 to 9 once</li>\r\n            <li> Each horizontal row can only contain each number from 1 to 9 once</li>\r\n            </ol> \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Rule\r\n","import logo from './logo.svg';\nimport './App.css';\nimport Board from './components/Board';\nimport { useState } from 'react';\nimport { makepuzzle, solvepuzzle } from \"sudoku\";\nimport Rule from './components/Rule';\n\nfunction App() {\n\n\n\n\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>Sudoku Game</h1>\n      </header>\n      <Board/>\n      <Rule/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}